// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

static const int layerCounts[3] = { 9,7,5 };
static const int brainCount = 1;

struct Neuron
{
	float value;
	float bias;
};

struct Pathway 
{
	int neuronInNum;
	int neuronOutNum;
	float weight;
};

struct Brain 
{
	Neuron neurons[layerCounts[0] + layerCounts[1] + layerCounts[2]];
	
	Pathway paths[layerCounts[0] * layerCounts[1] + layerCounts[1] * layerCounts[2]];

	void ClearNeuronValues()
	{
		for (int i = 0; i < (layerCounts[1] + layerCounts[2]); i++)
		{
			neurons[layerCounts[0] + i].value = 0.0f;
		}
	}
};

RWStructuredBuffer<Brain> buffBrain;

[numthreads(layerCounts[0] * layerCounts[1] + layerCounts[1] * layerCounts[2], brainCount,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	int inInt = buffBrain[id.y].paths[id.x].neuronInNum;
	int outInt = buffBrain[id.y].paths[id.x].neuronOutNum;

	buffBrain[id.y].neurons[outInt].value += (buffBrain[id.y].neurons[inInt].value + buffBrain[id.y].neurons[inInt].bias) * buffBrain[id.y].paths[id.x].weight;
}
